{
    "backend": {
        "adminAuthenticatesAll": true,
        "productionExceptionEMailNotification": {
            "mimeTypeSubType": "alternative",
            "smtpServer": {"url": "example.domain.com", "port": 993},
            "encryption": "ssl",
            "login": "login",
            "password": "password",
            "recipientAddress": "example@domain.com",
            "html": false,
            "backend": false,
            "frontend": false,
            "handleException": true
        },
        "errorReportAnswerHTMLContent": "<html><head><meta charset=\"utf-8\" /><title>errorReport</title><meta name=\"robots\" content=\"noindex, nofollow\" /></head><body>%s</body></html>",
        "unicodeNormalisationForm": "NFC",
        "dataKeysIgnore": [],
        "finalOptionConsolidation": true,
        "proxyServerSystemReloadCommand": "/usr/bin/env nginx -s reload &>/dev/null || /usr/bin/env sudo nginx -s reload",
        "jsonpGetParameterIndicator": ["jsonp", "callback"],
        "restResponseTemplate": ")]}',\n%s",
        "initialTemplateRendering": true,
        "removeDuplicatedRequestKey": false,
        "database": {
            "enginePrefix": "sqlite:///",
            "connectionArguments": {"timeout": 10},
            "initialisationCommands": [
                "PRAGMA foreign_keys=ON", "PRAGMA journal_mode=WAL",
                "PRAGMA busy_timeout=10000"
            ],
            "maximumFieldSize": 1000000000
        },
        "maximumCookieAgeInSeconds": 31536000,
        "model": {
            "generic": {
                "latitude": {
                    "minimum": 0, "maximum": 90, "pattern": "[0-9]+\\.[0-9]+"
                },
                "longitude": {
                    "minimum": 0, "maximum": 180, "pattern": "[0-9]+\\.[0-9]+"
                },
                "filePath": {
                    "minimumLength": 1, "maximumLength": 32000,
                    "pattern": ".+",
                    "fileReference": {
                        "__execute__": "<% location['medium'] %>%s"
                    }
                },
                "fileName": {
                    "minimumLength": {
                        "__execute__": "<% model['generic']['filePath']['minimumLength'] %>"
                    },
                    "maximumLength": 255,
                    "pattern": {
                        "__execute__": "<% model['generic']['filePath']['pattern'] %>"
                    },
                    "fileReference": {
                        "__execute__": "<% location['medium'] %>%s"
                    }
                },
                "name": {
                    "default": "",
                    "pattern": "[a-zA-Z -]+",
                    "minimumLength": 1,
                    "maximumLength": 255
                },
                "text": {"pattern": "(\\s|.)*"},
                "url": {
                    "minimumLength": 1,
                    "maximumLength": 2000,
                    "pattern": "(https?://)?(www\\.)?[a-zA-Z0-9.-]+\\.[a-z]{2,3}(/.*)?"
                },
                "urlProtocol": {
                    "minimumLength": 0,
                    "maximumLength": 255,
                    "pattern": {
                        "__execute__": "<% '|'.join(allowedLinkProtocols) %>"
                    }
                },
                "urlParameter": {
                    "default": "",
                    "minimumLength": 0,
                    "maximumLength": 2000,
                    "pattern": ".*"
                },
                "language": {
                    "minimumLength": 4,
                    "maximumLength": 4,
                    "pattern": "[a-z]{2}[A-Z]{2}$"
                },
                "loginEMailAddress": {
                    "minimumLength": 5,
                    "maximumLength": 255,
                    "pattern": {
                        "__execute__": "((admin)|(<% model['generic']['eMailAddress']['pattern'] %>))"
                    }
                },
                "eMailAddress": {
                    "minimumLength": 6,
                    "maximumLength": 255,
                    "pattern": "[_A-Za-z0-9\\-+]+(\\.[_A-Za-z0-9-]+)*@[A-Za-z0-9-]+(\\.[A-Za-z0-9-]+)*(\\.[A-Za-z]{2,})"
                },
                "phoneNumber": {
                    "minimumLength": 1,
                    "maximumLength": 50,
                    "minimum": 0,
                    "maximum": 9999999999999999999999999999999999999999999999,
                    "pattern": "([0-9-+()]+(/|-)?[0-9-+]+)?"
                },
                "zipCode": {
                    "maximumLength": 50,
                    "minimumLength": 1,
                    "pattern": "[0-9]+",
                    "default": "0"
                },
                "languageSpecific": {"default": {}}
            },
            "authentication": {
                "sessionToken": {"length": 32},
                "password": {"salt": {"length": 32}, "pepper": "pepperExample"}
            }
        },
        "defaultIndentLevel": 4,
        "authenticationMethod": "header",

        "delimiterPattern": "(!|\\?)",
        "webServer": {
            "root": "/",
            "default": {
                "__execute__": "<% location['htmlFile']['frontend'] %>"
            },
            "requestWhitelist": [
                {"__execute__": "GET|POST|DELETE|PUT|PATCH:/<% StringExtension(moduleName).regex_validated.content %><% delimiterPattern %>.+"},
                {"__execute__": "GET:(/|(<% StringExtension(location['webAsset']).regex_validated.content %>.+))"},
                {"__execute__": "PUT:<% StringExtension(location['medium']).regex_validated.content %>?"}
            ],
            "requestParameterDelimiter": {
                "__execute__": "<% delimiterPattern %>"
            },
            "authentication": false,
            "moduleLoading": {"__execute__": "<% moduleName %>"},
            "stopOrder": "", "directoryListing": false,
            "maximumNumberOfProcesses": 0
        },
        "location": {
            "htmlFile": {
                "frontend": "/index.html", "backend": "/admin.html",
                "template": {
                    "__execute__": "<% location['template'] %>index.html.tpl"
                }
            },
            "nginxConfiguration": {
                "folder": "/backendNginxConfiguration/",
                "login": {
                    "__execute__": "<% location['nginxConfiguration']['folder'] %>login.txt.tpl"
                }
            },
            "proxyServerLog": "/log/proxyServer.txt",
            "reportedClientError": "/log/reportedClientError/",
            "offlineManifestTemplateFile": {
                "__execute__": "<% location['template'] %>offlineManifest.tpl"
            },
            "cache": "/cache/",
            "webCache": {"__execute__": "<% location['cache'] %>web/"},
            "templateCache": {
                "__execute__": "<% location['cache'] %>template/"
            },
            "certificate": {
                "folder": "/certificate/",
                "pem": {
                    "__execute__": "<% location['certificate']['folder'] %>localhost.pem"
                },
                "key": {
                    "__execute__": "<% location['certificate']['folder'] %>localhost.key"
                },
                "crt": {
                    "__execute__": "<% location['certificate']['folder'] %>localhost.crt"
                },
                "intermediatePem": {
                    "__execute__": "<% location['certificate']['folder'] %>localhost.intermediate.pem"
                }
            },
            "backup": "/backup/",
            "database": {
                "folder": "/database/",
                "url": {
                    "__execute__": "<% location['database']['folder'] %>data"
                },
                "stateTypeReference": "__memory__",
                "schemaFile": {
                    "__execute__": "<% location['database']['folder'] %>schema.json"
                },
                "backup": {"__execute__": "<% location['backup'] %>database/"}
            },
            "templateIgnore": [
                {"__execute__": "<% location['nginxConfiguration']['login'] %>"},
                {"__execute__": "<% location['backup'] %>"},
                {"__execute__": "<% location['webCache'] %>"},
                "/boostNode/", "/webNode/", "/database/"
            ],
            "templateOnce": []
        },
        "webAssetPatternIgnore": [
            "(.*/)?[_.][^/]+(/.*)?", ".*\\.swp",
            ".*[/.]example(/.*|\\.[^/]*)?", "(.*/)?node_modules/.*"
        ],
        "commandLineArguments": [
            {
                "arguments": ["-w", "--web-cache"],
                "specification": {
                    "action": "store_true",
                    "default": false,
                    "help": "Activates the static file full web cache.",
                    "dest": "web_cache"
                }
            }, {
                "arguments": ["-r", "--reload"],
                "specification": {
                    "action": "store_true",
                    "default": false,
                    "help": "Indicates whether the application should simply render all templates and reload all configurations.",
                    "dest": "reload"
                }
            }, {
                "arguments": ["-n", "--host-name"],
                "specification": {
                    "action": "store",
                    "default": "",
                    "type": {"execute": "str"},
                    "required": false,
                    "help": "Defines application server host name. If you want to make your application only reachable from your local machine use \"127.0.0.1\". The default is listing on any incoming domain.",
                    "dest": "host_name",
                    "metavar": "STRING"
                }
            }, {
                "arguments": ["-a", "--proxy-host-name-pattern"],
                "specification": {
                    "action": "store",
                    "default": ".+",
                    "type": {"execute": "str"},
                    "required": false,
                    "help": "Defines the proxy host name pattern. The default is to listen on any incoming domain.",
                    "dest": "proxy_host_name_pattern",
                    "metavar": "PATTERN"
                }
            }, {
                "arguments": ["-b", "--proxy-host-name-prefix"],
                "specification": {
                    "action": "store",
                    "default": "",
                    "type": {"execute": "str"},
                    "required": false,
                    "help": "Defines the proxy host name prefix. This prefix will be sliced out by the application server logic. The default is empty.",
                    "dest": "proxy_host_name_prefix",
                    "metavar": "STRING"
                }
            }, {
                "arguments": ["-g", "--global-http-basic-authentication"],
                "specification": {
                    "action": "store",
                    "default": "",
                    "type": {"execute": "str"},
                    "required": false,
                    "help": "Defines a basic http authentication in the format \"login:password\" for every domain, no matter would http authentication a specific domain has.",
                    "dest": "global_http_basic_authentication",
                    "metavar": "STRING"
                }
            }, {
                "arguments": ["-p", "--port"],
                "specification": {
                    "action": "store",
                    "default": 8080,
                    "type": {"execute": "int"},
                    "required": false,
                    "help": "Defines the port number to access the web server. If zero given a free port will be determined.",
                    "dest": "port",
                    "metavar": "NUMBER"
                }
            }, {
                "arguments": ["-f", "--flags"],
                "specification": {
                    "action": "store",
                    "nargs": "*",
                    "default": [],
                    "type": {"execute": "str"},
                    "required": false,
                    "help": "Defines a various list of run time flags (e.g. to distinguish between staging and production environments).",
                    "dest": "flags",
                    "metavar": "FLAGS"
                }
            }, {
                "arguments": ["-i", "--proxy-ports"],
                "specification": {
                    "action": "store",
                    "nargs": "*",
                    "default": [80],
                    "type": {"execute": "int"},
                    "required": false,
                    "help": "Defines the proxy port numbers to listen for.",
                    "dest": "proxy_ports",
                    "metavar": "PORTS"
                }
            }, {
                "arguments": ["-d", "--dead-file-reference-check"],
                "specification": {
                    "action": "store_true",
                    "default": false,
                    "help": "Checks for dead file referenced database entities.",
                    "dest": "dead_file_reference_check"
                }
            }, {
                "arguments": ["-s", "--dead-soft-reference-check-properties"],
                "specification": {
                    "action": "store",
                    "nargs": "*",
                    "default": ["templateName"],
                    "help": "Checks for dead soft referenced database entities with given property names.",
                    "dest": "dead_soft_reference_check_properties",
                    "metavar": "PROPERTY_NAMES"
                }
            }, {
                "arguments": ["-e", "--dead-soft-reference-check-exceptions"],
                "specification": {
                    "action": "store",
                    "nargs": "*",
                    "default": ["Site"],
                    "help": "Ignores given list of models during dead soft reference checks.",
                    "dest": "dead_soft_reference_check_exceptions",
                    "metavar": "MODEL_NAMES"
                }
            }
        ]
    },
    "frontend": {
        "debug": {"__execute__": "<% main.debug %>"},
        "offline": {
            "integrateSites": true,
            "pathPatternToIgnore": "^$",
            "pathPatternToIntegrate": "(https?://)|(.*\\.(css|js|png|svg|jpg|jpeg|gif|ico|woff|woff2|html|json|xml)$)"
        },
        "requestFileName": {"__execute__": "<% moduleName %>"},
        "freeSpaceInByte": {
            "__execute__": "<% FileHandler(location='/').free_space %>"
        },
        "usedSpaceInByte": {
            "__execute__": "<% FileHandler(location='/').disk_used_space %>"
        },
        "startTimeStamp": {
            "__execute__": "<% __time_stamp__ %>"
        },
        "requestRetries": {
            "409": {"number": 3, "statusPattern": "^.*locked.*$"},
            "504": {"number": 3, "statusPattern": "^.*$"},
            "502": {"number": 3, "statusPattern": "^.*$"}
        }
    },
    "both": {
        "fileHashAlgorithm": "md5",
        "lastDataWriteHeaderName": {
            "__execute__": "<% session['dataDescriptionPrefix'] %>LastDataWrite"
        },
        "session": {
            "dataDescriptionPrefix": "application",
            "expirationTimeDelta": 3600,
            "clearCacheOnUsersLocationChange": true,
            "key": {
                "token": {
                    "__execute__": "<% session['dataDescriptionPrefix'] %>SessionToken"
                },
                "userID": {
                    "__execute__": "<% session['dataDescriptionPrefix'] %>UserID"
                },
                "expiration": {
                    "__execute__": "<% session['dataDescriptionPrefix'] %>SessionExpirationDateTime"
                },
                "location": {
                    "__execute__": "<% session['dataDescriptionPrefix'] %>Location"
                }
            }
        },

        "location": {
            "webAsset": "/webAsset/",
            "template": {"__execute__": "<% location['webAsset'] %>template/"},
            "medium": {"__execute__": "<% location['webAsset'] %>medium/"}
        },

        "encoding": "utf_8",

        "defaultLanguage": "enUS",
        "model": {
            "authentication": {
                "password": {
                    "minimumLength": 4,
                    "maximumLength": 100,
                    "pattern": "....+"
                },
                "simplePassword": {
                    "minimumLength": 1,
                    "maximumLength": 50,
                    "pattern": "[a-zA-Z0-9_-]+"
                }
            }
        },
        "allowedLinkProtocols": ["http", "https", "", "file", "ftp", "ftps"],
        "allowedTypes": {
            "image": {
                "mimeType": [
                    "image/jpg", "image/jpeg", "image/pjpeg",
                    "image/png", "image/svg+xml", "image/svg",
                    "image/vnd.microsoft.icon", "image/x-icon",
                    "image/gif", "image/tiff", "image/vnd.wap.wbmp",
                    "image/x-icon", "image/x-jng", "image/x-ms-bmp",
                    "image/svg+xml", "image/webp"
                ],
                "extension": [
                    "jpg", "jpeg", "png", "svg", "ico", "gif", "tiff", "bmp",
                    "webp"
                ]
            },
            "audio": {
                "mimeType": [
                    "audio/midi", "audio/mpeg", "audio/ogg", "audio/x-m4a",
                    "audio/x-realaudio"
                ],
                "extension": ["midi", "mpeg", "ogg", "m4a"]
            },
            "video": {
                "mimeType": [
                    "video/webm", "video/x-webm", "text/x-webm", "video/3gpp",
                    "video/mp2t", "video/mp4", "video/mpeg", "video/quicktime",
                    "video/flv", "video/x-flv", "video/m4v", "video/x-m4v",
                    "video/mng", "video/x-mng", "video/x-ms-as",
                    "video/x-ms-wmv", "video/x-msvideo",
                    "application/shockwave-flash",
                    "application/x-shockwave-flash"
                ],
                "extension": [
                    "webm", "3gpp", "mp2t", "mp4", "mpeg", "mov", "qt", "flv",
                    "m4v", "mng", "asf", "wmv"
                ]
            },
            "data": {
                "mimeType": [
                    "application/xml", "text/csv", "text/xml",
                    "application/atom+xml", "application/rss+xml",
                    "application/json",
                    "application/vnd.google-earth.kml+xml",
                    "application/vnd.google-earth.kmz",
                    "application/xhtml+xml", "application/xspf+xml"
                ],
                "extension": ["xml", "csv", "json", "kml"]
            },
            "document": {
                "mimeType": [
                    "text/plain", "text/html", "text/jade", "text/css",
                    "text/mathml", "text/vnd.wap.wml", "application/pdf",
                    "application/postscript", "application/rtf",
                    "application/vnd.apple.mpegurl",
                    "application/vnd.ms-excel",
                    "application/vnd.ms-powerpoint",
                    "application/vnd.wap.wmlc", "application/msword",
                    "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
                    "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                    "application/vnd.openxmlformats-officedocument.presentationml.presentation"
                ],
                "extension": [
                    "txt", "html", "css", "pdf", "rtf", "ps", "doc", "docx",
                    "jade"
                ]
            },
            "script": {
                "mimeType": [
                    "application/javascript", "application/x-cocoa",
                    "application/x-perl", "text/x-python"
                ],
                "extension": ["js", "pl", "py"]
            },
            "font": {
                "mimeType": [
                    "application/vnd.ms-fontobject", "application/font-woff"
                ],
                "extension": ["woff", "woff2", "eot", "ttf"]
            },
            "binary": {
                "mimeType": [
                    "application/java-archive", "application/x-7z-compressed",
                    "application/zip", "application/octet-stream",
                    "application/octet-stream", "application/x-rar-compressed"
                ],
                "extension": ["java", "zip", "rar", "7z"]
            },
            "knownOther": {
                "mimeType": [
                    "text/x-component", "text/vnd.sun.j2me.app-descriptor",
                    "application/mac-binhex40",
                    "application/x-java-archive-diff",
                    "application/x-java-jnlp-file",
                    "application/x-makeself",
                    "application/x-pilot",
                    "application/x-redhat-package-manager",
                    "application/x-sea", "application/x-stuffit",
                    "application/x-tcl", "application/x-x509-ca-cert",
                    "application/x-xpinstall"
                ],
                "extension": []
            }
        }
    }
}
